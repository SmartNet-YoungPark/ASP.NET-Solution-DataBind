@{
    ViewBag.Title = "Home Page";
}
 <style>
     pre {
         font-family: Calibri;
         color: b#000000;
         margin: 25px;
         font-size : medium;
     }
</style>
<div class="jumbotron">
    <h1>ASP.NET pattern models</h1>
    <p class="lead">
        ASP.NET has support some patterns for user  application and
        it depends on design patterns accrording to user software ebnvironments or solution.
    </p>

</div>

<div class="row">

    <h2>Pattern 1.</h2>
    <p>
        @Html.ActionLink("ASP.NET MVC design pattern - EntityFramework", "Index", "Departments")
    </p>

    <b> Call Controller Flow : Department => Employment => Details </b>
    <pre>

    public class DepartmentsController : Controller
    {
         public ActionResult Index()
            {
            EmployeeDBEntities dbContext = new EmployeeDBEntities();
            List &ltDepartment&gt
            listDepartments = dbContext.Departments.ToList();
            return View(listDepartments);
    }
    ---------------------------
    public class EmployeesController : Controller
    {
    public ActionResult Index(int departmentId)
         {
            EmployeeDBEntities dbContext = new EmployeeDBEntities();
            List &ltEmployee&gt
            employees = dbContext.Employees.Where(emp => emp.DepartmentId == departmentId).ToList();
            return View(employees);
         }
    public ActionResult Details(int id)
        {
            EmployeeDBEntities dbContext = new EmployeeDBEntities();
            Employee employee = dbContext.Employees.FirstOrDefault(x => x.EmployeeId == id);
            return View(employee);
        }
     }
   </pre>

    <p>
        @Html.ActionLink("ASP.NET MVC design pattern - EntityFramework, Business object using stored procedure", "/Index", "BusinessObject")
    </p>
    <b> Call Controller : </b>
    <pre>
        // named GetAllMembers()=> Stored Procedure call
         public ActionResult Index()
            {
                MemberBusinessLayer memberBusinessLayer = new MemberBusinessLayer();
                List &lt Member &gt members = memberBusinessLayer.GetAllMembers();
                return View(members);
            }
    </pre>

    <b> Business logic : </b>
    <pre>
   class MemberBusinessLayer  
    {
        public List &lt Member &gt GetAllMembers()
        {
            //Reads the connection string from web.config file. The connection string name is DBCS
            string connectionString = ConfigurationManager.ConnectionStrings["DBCS"].ConnectionString;

            //Create List of employees collection object which can store list of employees
            List &lt Member &gt  members = new List &lt Member &gt ();

    //Establish the Connection to the database
    using (SqlConnection con = new SqlConnection(connectionString))
    {
    //Creating the command object by passing the stored procedure 
    SqlCommand cmd = new SqlCommand("spGetAllMembers", con);

    //Specify the command type as stored procedure
    cmd.CommandType = CommandType.StoredProcedure;

    //Open the connection
    con.Open();

    //Execute the command and stored the result in Data Reader as the method ExecuteReader
    //is going to return a Data Reader result set
    SqlDataReader rdr = cmd.ExecuteReader();

    //Read each member
    while (rdr.Read())
    {
  
    Member mem = new Member();
    mem.ID = Convert.ToInt32(rdr["Id"]);
    mem.Name = rdr["Name"].ToString();
    mem.Gender = rdr["Gender"].ToString();
    mem.City = rdr["City"].ToString();
    mem.Salary = Convert.ToDecimal(rdr["Salary"]);
    mem.DateOfBirth = Convert.ToDateTime(rdr["DateOfBirth"]);

      members.Add(mem);
    }
    }
    //Return the list of members that is stored in the list collection
    return members;
    }
    </pre>

    <b> Stored Procedure : </b>
    <pre>
    Create procedure [dbo].[spGetAllmembers]
    as
    Begin
    Select Id, Name, Gender, City, Salary, DateOfBirth
    from member
    End
    </pre>
    <p>
        @Html.ActionLink("ASP.NET MVC design pattern - EntityFramework, Business object using stored procedure with Form GET/POST for insert, Form Binding", "/CreateForm", "BusinessObject")
    </p>
    <b> Call Controller : </b>
    <pre>
    [HttpGet]
       public ActionResult CreateForm()
        {
            return View();
        }
        [HttpPost]
        public ActionResult CreateForm(FormCollection formCollection)
        {
            Member member = new Member();
            // Retrieve form data using form collection
            member.Name = formCollection["Name"];
            member.Gender = formCollection["Gender"];
            member.City = formCollection["City"];
            member.Salary = Convert.ToDecimal(formCollection["Salary"]);
            member.DateOfBirth = Convert.ToDateTime(formCollection["DateOfBirth"]);
            MemberBusinessLayer memberBusinessLayer = new MemberBusinessLayer();
            memberBusinessLayer.AddMember(member);
            return RedirectToAction("/Index");
        }
    </pre>
    <b> Business logic : </b>
    <pre>
    public void AddMember(Member member)
    {
    //Creating the connection string
    string connectionString = ConfigurationManager.ConnectionStrings["DBCS"].ConnectionString;
    //Establishing the connection to the database
    using (SqlConnection con = new SqlConnection(connectionString))
    {
    //Creating the command object by passing the stored procedure and connection object as argument
    //This stored procedure is used to store the employee in to the database
    SqlCommand cmd = new SqlCommand("spAddMember", con)
    {
    //Specifying the command as stored procedure
    CommandType = CommandType.StoredProcedure
    };

    //Creating SQL parameters because that stored procedure accept some input values
    SqlParameter paramName = new SqlParameter
    {
    //Storing the parameter name of the stored procedure into the SQL parameter
    //By using ParameterName property
    ParameterName = "&#64Name",
    //storing the parameter value into sql parameter by using Value ptoperty
    Value = member.Name
    };
    //Adding that parameter into Command objects Parameter collection by using Add method
    //which will take the SQL parameter name as argument
    cmd.Parameters.Add(paramName);

    //Same for all other parameters (Gender, City, DateOfBirth )
    SqlParameter paramGender = new SqlParameter
    {
    ParameterName = "&#64Gender",
    Value = member.Gender
    };
    cmd.Parameters.Add(paramGender);

    SqlParameter paramCity = new SqlParameter
    {
    ParameterName = "&#64City",
    Value = member.City
    };
    cmd.Parameters.Add(paramCity);

    SqlParameter paramSalary = new SqlParameter
    {
    ParameterName = "&#64Salary",
    Value = member.Salary
    };
    cmd.Parameters.Add(paramSalary);

    SqlParameter paramDateOfBirth = new SqlParameter
    {
    ParameterName = "&#64DateOfBirth",
    Value = member.DateOfBirth
    };
    cmd.Parameters.Add(paramDateOfBirth);

    //Open the connection and execute the command on ExecuteNonQuery method
    con.Open();
    cmd.ExecuteNonQuery();
    }
    }
    </pre>
    <b> Stored Procedure : </b>
    <pre>
  Create procedure [dbo].[spAddMember]  
  &#64Name nvarchar(50),
  &#64Gender nvarchar (10),
  &#64City nvarchar (50),
  &#64Salary decimal(18,2),
  &#64DateOfBirth DateTime
As
Begin
  Insert into member (Name, Gender, City, Salary, DateOfBirth)
  Values (&#64Name, &#64Gender, &#64City,&#64Salary, &#64DateOfBirth)
End
</pre>
    <p>
        @Html.ActionLink("ASP.NET MVC design pattern - EntityFramework, Business object using stored procedure with GET/POST for insert, UpdateModel/TryUpdateModel Databinding and No Parameter For insert", "/Create", "BusinessObject")
    </p>
    <b> Call Controller : </b>
    <pre>
      [HttpGet]
        [ActionName("Create")]
        public ActionResult Create_Get()
        {
            return View();
        }
        [HttpPost]
        [ActionName("Create")]
        public ActionResult Create_Post()
        {
            if (ModelState.IsValid)
            {
                MemberBusinessLayer memberBusinessLayer = new MemberBusinessLayer();
                Member member = new Member();
                //Data binding with UpdateModel or TryUpdateModel
                TryUpdateModel &ltMember&gt (member);
                memberBusinessLayer.AddMember(member);
                return RedirectToAction("/Index");
            }
            return View();
        }
   </pre>
    <b> Business logic : </b>
    <pre>
    public void AddMember(Member member)
    .... as the same
    </pre>
    <b> Stored procedure : </b>
    <pre>
    Create procedure [dbo].[spAddMember] 
    .... as the same
    </pre>

    <p>
        @Html.ActionLink("ASP.NET MVC design pattern - EntityFramework, Business object using stored procedure with GET/POST for insert, Parameter", "/CreateParam", "BusinessObject")
    </p>

    <pre>
      //Data binding
        [HttpGet]
        [ActionName("CreateParam")]
        public ActionResult CreateParam_Get()
        {
            return View();
        }
        [HttpPost]
        [ActionName("CreateParam")]
        public ActionResult CreateParam_Post(Member member)
        {
            if (ModelState.IsValid)
            {
                MemberBusinessLayer memberBusinessLayer = new MemberBusinessLayer();
                memberBusinessLayer.AddMember(member);
                return RedirectToAction("/Index");
            }
            else
            {
                return View();
            }
        }
   </pre>
    <b> Business logic : </b>
    <pre>
    public void AddMember(Member member)
    .... as the same
    </pre>
    <b> Stored procedure : </b>
    <pre>
    Create procedure [dbo].[spAddMember] 
    .... as the same
    </pre>
    <p>
        @Html.ActionLink("ASP.NET MVC design pattern - EntityFramework, Business object using stored procedure with GET/POST for Update/Delete, Parameter", "/Index", "BusinessObject")
    </p>
  
</div>